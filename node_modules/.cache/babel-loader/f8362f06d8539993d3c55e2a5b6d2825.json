{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount); // The value we return becomes the `fulfilled` action payload\n\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/kostya/projects/react/itRex/table/src/redux/reducer.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB,C,CAKA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC1C,oBAD0C,EAE1C,MAAOO,MAAP,IAAkB;AACd,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC,CADc,CAEd;;AACA,SAAOC,QAAQ,CAACC,IAAhB;AACH,CANyC,CAAvC;AASP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;AACpCU,EAAAA,IAAI,EAAE,SAD8B;AAEpCR,EAAAA,YAFoC;AAGpC;AACAS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAClB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACH,KAPK;AAQNW,IAAAA,SAAS,EAAGD,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACH,KAVK;AAWN;AACAY,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAClCH,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACH;AAdK,GAJ0B;AAoBpC;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaf,cAAc,CAACgB,OAD5B,EACsCR,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACH,KAHL,EAIKgB,OAJL,CAIaf,cAAc,CAACiB,SAJ5B,EAIuC,CAACT,KAAD,EAAQG,MAAR,KAAmB;AAClDH,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACH,KAPL;AAQH;AA/BmC,CAAD,CAAhC;AAkCP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CN,YAAY,CAACc,OAAjE,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIX,KAAD,IAAWA,KAAK,CAACY,OAAN,CAActB,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMuB,cAAc,GAAIpB,MAAD,IAAY,CAACqB,QAAD,EAAWC,QAAX,KAAwB;AAC9D,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AACxBF,IAAAA,QAAQ,CAACZ,iBAAiB,CAACT,MAAD,CAAlB,CAAR;AACH;AACJ,CALM;AAOP,eAAeG,YAAY,CAACqB,OAA5B","sourcesContent":["\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n    value: 0,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n    'counter/fetchCount',\n    async (amount) => {\n        const response = await fetchCount(amount);\n        // The value we return becomes the `fulfilled` action payload\n        return response.data;\n    }\n);\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        incrementByAmount: (state, action) => {\n            state.value += action.payload;\n        },\n    },\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\n    // including actions generated by createAsyncThunk or in other slices.\n    extraReducers: (builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(incrementAsync.fulfilled, (state, action) => {\n                state.status = 'idle';\n                state.value += action.payload;\n            });\n    },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n        dispatch(incrementByAmount(amount));\n    }\n};\n\nexport default counterSlice.reducer;"]},"metadata":{},"sourceType":"module"}