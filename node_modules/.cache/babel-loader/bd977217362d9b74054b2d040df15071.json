{"ast":null,"code":"var _jsxFileName = \"/Users/kostya/projects/Redux/codica/newCityWeather/src/components/CitysList.js\",\n    _s = $RefreshSig$();\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getFirstData } from '../redux/actions';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CityList() {\n  _s();\n\n  let items = useSelector(state => state.citys);\n  console.log(items);\n  useEffect(() => {\n    dispatch(getFirstData());\n  }, [dispatch]);\n  let weatherId;\n  let content;\n  const [weather, setWeather] = useState(true); // what we rendering\n\n  const [dataCity, setDataCity] = useState([]); // what city open to show full weather\n  // const [data, setData] = useState(items) // what city open to show full weather\n\n  const dispatch = useDispatch();\n  let card = items.map(el => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 200\n    },\n    onClick: () => showWeather(el),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        alt: \"weather\",\n        height: \"140\",\n        src: \"https://t3.ftcdn.net/jpg/02/11/52/42/360_F_211524227_Ett8aboQvVnROAFtqu3S1pW99Y3Th9vm.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h3\",\n          component: \"div\",\n          children: el.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h6\",\n          component: \"div\",\n          children: [el.temp, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), el.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this));\n\n  function deleteCity() {\n    dispatch({\n      type: 'DELETE_CITY',\n      payload: dataCity.id\n    });\n    console.log(dataCity.id);\n    showCitys();\n  }\n\n  function showCitys() {\n    console.log('show');\n    setWeather(!weather);\n  }\n\n  function showWeather(el) {\n    setDataCity(el);\n    setWeather(!weather);\n  } // let currentCity = items.filter(el => el.id === weatherId);\n  // console.log(currentCity);\n\n\n  weather ? content = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"citys\",\n    children: [\" \", card, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 19\n  }, this) : content = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"showcity\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close\",\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: () => showCitys(),\n          cursor: \"pointer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showcity-name\",\n        children: [/*#__PURE__*/_jsxDEV(AutorenewIcon, {\n          sx: {\n            fontSize: 30\n          },\n          onClick: () => console.log('update'),\n          cursor: \"pointer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), dataCity.name, /*#__PURE__*/_jsxDEV(DeleteForeverIcon, {\n          color: \"warning\",\n          sx: {\n            fontSize: 40\n          },\n          onClick: () => deleteCity(),\n          cursor: \"pointer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showcity-description\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"ul\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" temp - \", dataCity.temp, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"tempMax - \", dataCity.tempMax]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" tempMin - \", dataCity.tempMin]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" description - \", dataCity.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"windSpeed - \", dataCity.windSpeed]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"windGust - \", dataCity.windGust]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"humidity - \", dataCity.humidity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" pressure - \", dataCity.pressure]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 19\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CityList, \"OFKzSYvT39bMY7EyHeZSn43SNSc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CityList;\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["/Users/kostya/projects/Redux/codica/newCityWeather/src/components/CitysList.js"],"names":["Card","CardActions","CardContent","CardMedia","Typography","useEffect","useState","useSelector","useDispatch","getFirstData","CloseIcon","AutorenewIcon","DeleteForeverIcon","CityList","items","state","citys","console","log","dispatch","weatherId","content","weather","setWeather","dataCity","setDataCity","card","map","el","maxWidth","showWeather","name","temp","description","deleteCity","type","payload","id","showCitys","fontSize","tempMax","tempMin","windSpeed","windGust","humidity","pressure"],"mappings":"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","sourcesContent":["import Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getFirstData } from '../redux/actions';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\n\n\n\n\nfunction CityList() {\n\n    let items = useSelector((state) => state.citys)\n    console.log(items);\n\n    useEffect(() => {\n        dispatch(getFirstData())\n    }, [dispatch])\n\n    let weatherId\n    let content\n    const [weather, setWeather] = useState(true) // what we rendering\n    const [dataCity, setDataCity] = useState([]) // what city open to show full weather\n    // const [data, setData] = useState(items) // what city open to show full weather\n\n    const dispatch = useDispatch()\n\n\n    let card = items.map(el =>\n        <Card sx={{ maxWidth: 200 }} onClick={() => showWeather(el)}>\n            <div className=\"cardWrapper\" >\n                <CardMedia\n                    component=\"img\"\n                    alt=\"weather\"\n                    height=\"140\"\n                    src=\"https://t3.ftcdn.net/jpg/02/11/52/42/360_F_211524227_Ett8aboQvVnROAFtqu3S1pW99Y3Th9vm.jpg\"\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h3\" component=\"div\">\n                        {el.name}\n\n                    </Typography>\n                    <Typography gutterBottom variant=\"h6\" component=\"div\">\n                        {el.temp}\n                        <br />\n                        {el.description}\n                    </Typography>\n                </CardContent>\n            </div>\n        </Card >)\n\n    function deleteCity() {\n        dispatch({\n            type: 'DELETE_CITY',\n            payload: dataCity.id\n        })\n        console.log(dataCity.id);\n        showCitys()\n    }\n    function showCitys() {\n        console.log('show');\n        setWeather(!weather)\n    }\n\n    function showWeather(el) {\n        setDataCity(el)\n        setWeather(!weather)\n    }\n\n    // let currentCity = items.filter(el => el.id === weatherId);\n    // console.log(currentCity);\n\n\n\n    weather ?\n        content = < div className='citys' > {card} </div > :\n        content = < div >\n            <div className='showcity'>\n                <div className='close'><CloseIcon onClick={() => showCitys()} cursor='pointer' /></div>\n                <div className='showcity-name'>\n                    < AutorenewIcon sx={{ fontSize: 30 }} onClick={() => console.log('update')} cursor='pointer' />\n                    {dataCity.name}\n                    <DeleteForeverIcon color=\"warning\" sx={{ fontSize: 40 }} onClick={() => deleteCity()} cursor='pointer' />\n                </div>\n                <div className='showcity-description'>\n                    <ul className='ul'>\n                        <li> temp - {dataCity.temp} </li>\n                        <li>tempMax - {dataCity.tempMax}</li>\n                        <li> tempMin - {dataCity.tempMin}</li>\n                        <li> description - {dataCity.description}</li>\n                        <li>windSpeed - {dataCity.windSpeed}</li>\n                        <li>windGust - {dataCity.windGust}</li>\n                        <li>humidity - {dataCity.humidity}</li>\n                        <li> pressure - {dataCity.pressure}</li>\n                    </ul>\n                </div>\n            </div>\n        </div >\n\n\n    return (\n        <div >{content}</div>\n    )\n\n}\n\n\n\nexport default CityList;"]},"metadata":{},"sourceType":"module"}