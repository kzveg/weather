{"ast":null,"code":"var _jsxFileName = \"/Users/kostya/projects/Redux/codica/newCityWeather/src/components/CitysList.js\",\n    _s = $RefreshSig$();\n\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { citys } from '../mock-items.js/sitys';\nimport { getFirstData } from '../redux/actions';\nimport CityWeather from './CityWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CityList() {\n  _s();\n\n  let container = [];\n  const [weather, setWeather] = useState(true);\n  const dispatch = useDispatch();\n  let items = useSelector(state => state.sitys);\n  const [dataCity, setDataCity] = useState(items); // useEffect(() => {\n  //     dispatch(getFirstData())\n  // }, [])\n\n  useEffect(() => {\n    dispatch(getFirstData());\n    setDataCity(dataCity);\n  }, [dataCity]);\n  console.log(items);\n  console.log(container);\n  let card = container.map(el => /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      maxWidth: 200\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardWrapper\",\n      onClick: () => showWeather(el),\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        alt: \"weather\",\n        height: \"140\",\n        src: \"https://t3.ftcdn.net/jpg/02/11/52/42/360_F_211524227_Ett8aboQvVnROAFtqu3S1pW99Y3Th9vm.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h3\",\n          component: \"div\",\n          children: el.main.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h6\",\n          component: \"div\",\n          children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this));\n\n  function showWeather(el) {\n    el.flag = !el.flag;\n    setWeather(!weather);\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CityWeather, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 19\n  }, this);\n\n  if (weather) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"citys\",\n      children: [\" \", card, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CityList, \"DXNAept0vKrI+evl05dxEIdePQU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CityList;\nexport default CityList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityList\");","map":{"version":3,"sources":["/Users/kostya/projects/Redux/codica/newCityWeather/src/components/CitysList.js"],"names":["Card","CardActions","CardContent","CardMedia","Typography","useEffect","useState","useSelector","useDispatch","citys","getFirstData","CityWeather","CityList","container","weather","setWeather","dispatch","items","state","sitys","dataCity","setDataCity","console","log","card","map","el","maxWidth","showWeather","main","name","flag","content"],"mappings":"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","sourcesContent":["import Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { citys } from '../mock-items.js/sitys';\nimport { getFirstData } from '../redux/actions';\nimport CityWeather from './CityWeather';\n\n\n\nfunction CityList() {\n    let container = []\n\n    const [weather, setWeather] = useState(true)\n\n    const dispatch = useDispatch()\n\n    let items = useSelector((state) => state.sitys)\n\n    const [dataCity, setDataCity] = useState(items)\n\n\n\n\n    // useEffect(() => {\n    //     dispatch(getFirstData())\n    // }, [])\n\n    useEffect(() => {\n        dispatch(getFirstData())\n        setDataCity(dataCity);\n    }, [dataCity])\n\n\n    console.log(items);\n    console.log(container);\n\n    let card = container.map(el =>\n        <Card sx={{ maxWidth: 200 }}>\n            <div className=\"cardWrapper\" onClick={() => showWeather(el)}>\n                <CardMedia\n                    component=\"img\"\n                    alt=\"weather\"\n                    height=\"140\"\n                    src=\"https://t3.ftcdn.net/jpg/02/11/52/42/360_F_211524227_Ett8aboQvVnROAFtqu3S1pW99Y3Th9vm.jpg\"\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h3\" component=\"div\">\n                        {el.main.name}\n\n                    </Typography>\n                    <Typography gutterBottom variant=\"h6\" component=\"div\">\n                        {/* {el.main.temp} */}\n                        <br />\n                        {/* {el.weather[0].description} */}\n                    </Typography>\n                </CardContent>\n            </div>\n        </Card >)\n\n    function showWeather(el) {\n        el.flag = !el.flag;\n        setWeather(!weather)\n    }\n\n    let content = <div><CityWeather /></div>\n    if (weather) {\n        content = < div className='citys' > {card} </div >\n    }\n\n\n\n    return (\n        <div >{content}</div>\n    )\n\n}\n\n\n\nexport default CityList;"]},"metadata":{},"sourceType":"module"}